{"version":3,"sources":["components/Login/Login.module.css","components/Login/Login.jsx","components/Login/LoginContainer.jsx"],"names":["module","exports","validationSchema","yup","shape","email","required","password","min","useStyles","makeStyles","theme","root","margin","LoginForm","props","classes","formik","useFormik","initialValues","rememberMe","captcha","onSubmit","values","a","login","className","handleSubmit","TextField","name","label","type","value","onChange","handleChange","onBlur","handleBlur","error","touched","Boolean","errors","helperText","variant","color","fullWidth","Checkbox","checked","captchaUrl","src","alt","size","Button","disabled","isSubmitting","LoginContainer","connect","state","isAuth","auth","formError","messages","to","style","loginForm","Alert","severity"],"mappings":"kGACAA,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,UAAY,2B,gMCqBrDC,EAAmBC,MAAaC,MAAM,CAC1CC,MAAOF,MAAaE,QAAQC,WAC5BC,SAAUJ,MAAaK,IAAI,GAAGF,aAG1BG,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJ,uBAAwB,CACtBC,OAAQ,kBAKRC,EAAY,SAACC,GACjB,IAAMC,EAAUP,IACVQ,EAASC,YAAU,CACvBC,cAAe,CACbd,MAAO,GACPE,SAAU,GACVa,YAAY,EACZC,QAAS,MAEXC,SAAS,WAAD,4BAAE,WAAOC,GAAP,SAAAC,EAAA,sEACFT,EAAMU,MACVF,EAAOlB,MACPkB,EAAOhB,SACPgB,EAAOH,WACPG,EAAOF,SALD,2CAAF,mDAAC,GAQTnB,iBAAkBA,IAEpB,OACE,uBAAMwB,UAAWV,EAAQJ,KAAMU,SAAUL,EAAOU,aAAhD,UACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLC,MAAM,SACNC,KAAK,QACLC,MAAOf,EAAOM,OAAOlB,MACrB4B,SAAUhB,EAAOiB,aACjBC,OAAQlB,EAAOmB,WACfC,MAAOpB,EAAOqB,QAAQjC,OAASkC,QAAQtB,EAAOuB,OAAOnC,OACrDoC,WAAYxB,EAAOuB,OAAOnC,MAC1BqC,QAAQ,WACRC,MAAM,UACNC,WAAS,IAEX,cAAChB,EAAA,EAAD,CACEC,KAAK,WACLC,MAAM,WACNC,KAAK,WACLC,MAAOf,EAAOM,OAAOhB,SACrB0B,SAAUhB,EAAOiB,aACjBC,OAAQlB,EAAOmB,WACfC,MAAOpB,EAAOqB,QAAQ/B,UAAYgC,QAAQtB,EAAOuB,OAAOjC,UACxDkC,WAAYxB,EAAOuB,OAAOjC,SAC1BmC,QAAQ,WACRC,MAAM,UACNC,WAAS,IAEX,cAACC,EAAA,EAAD,CACEhB,KAAK,aACLiB,QAAS7B,EAAOM,OAAOH,WACvBa,SAAUhB,EAAOiB,aACjBS,MAAM,YA/BV,cAkCG5B,EAAMgC,YACL,qCACE,qBAAKC,IAAKjC,EAAMgC,WAAYE,IAAI,YAChC,cAACrB,EAAA,EAAD,CACEgB,WAAS,EACTF,QAAQ,WACRQ,KAAK,QACLrB,KAAK,UACLC,MAAM,UACNE,MAAOf,EAAOM,OAAOF,SAAW,GAChCY,SAAUhB,EAAOiB,kBAIvB,cAACiB,EAAA,EAAD,CACEpB,KAAK,SACLW,QAAS,YACTC,MAAM,UACNS,SAAUnC,EAAOoC,aACjBT,WAAS,EALX,wBC7FAU,EAAiBC,aAND,SAACC,GAAD,MAAY,CAChCC,OAAQD,EAAME,KAAKD,OACnBE,UAAWH,EAAME,KAAKE,SAAS,GAC/Bb,WAAYS,EAAME,KAAKX,cAGuB,CAAEtB,WAA3B8B,EDFF,SAACxC,GACpB,OAAIA,EAAM0C,OACD,cAAC,IAAD,CAAUI,GAAG,aAGpB,qBAAKnC,UAAWoC,IAAMrC,MAAtB,SACE,sBAAKC,UAAWoC,IAAMC,UAAtB,UACGhD,EAAM4C,WAAa,cAACK,EAAA,EAAD,CAAOC,SAAS,QAAhB,SAAyBlD,EAAM4C,YACnD,cAAC,EAAD,eAAe5C,YCJRuC","file":"static/js/10.75bdc892.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__2Px22\",\"loginForm\":\"Login_loginForm__1Hg13\"};","import React from \"react\";\nimport style from \"./Login.module.css\";\nimport { useFormik } from \"formik\";\nimport { TextField, Checkbox, Button, makeStyles } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport * as yup from \"yup\";\nimport { Redirect } from \"react-router-dom\";\n\nexport const Login = (props) => {\n  if (props.isAuth) {\n    return <Redirect to=\"/profile\" />;\n  }\n  return (\n    <div className={style.login}>\n      <div className={style.loginForm}>\n        {props.formError && <Alert severity=\"error\">{props.formError}</Alert>}\n        <LoginForm {...props} />\n      </div>\n    </div>\n  );\n};\n\nconst validationSchema = yup.object().shape({\n  email: yup.string().email().required(),\n  password: yup.string().min(6).required(),\n});\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& .MuiTextField-root\": {\n      margin: \"10px auto\",\n    },\n  },\n}));\n\nconst LoginForm = (props) => {\n  const classes = useStyles();\n  const formik = useFormik({\n    initialValues: {\n      email: \"\",\n      password: \"\",\n      rememberMe: false,\n      captcha: null,\n    },\n    onSubmit: async (values) => {\n      await props.login(\n        values.email,\n        values.password,\n        values.rememberMe,\n        values.captcha\n      );\n    },\n    validationSchema: validationSchema,\n  });\n  return (\n    <form className={classes.root} onSubmit={formik.handleSubmit}>\n      <TextField\n        name=\"email\"\n        label=\"e-mail\"\n        type=\"email\"\n        value={formik.values.email}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.email && Boolean(formik.errors.email)}\n        helperText={formik.errors.email}\n        variant=\"outlined\"\n        color=\"primary\"\n        fullWidth\n      />\n      <TextField\n        name=\"password\"\n        label=\"password\"\n        type=\"password\"\n        value={formik.values.password}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.password && Boolean(formik.errors.password)}\n        helperText={formik.errors.password}\n        variant=\"outlined\"\n        color=\"primary\"\n        fullWidth\n      />\n      <Checkbox\n        name=\"rememberMe\"\n        checked={formik.values.rememberMe}\n        onChange={formik.handleChange}\n        color=\"primary\"\n      />\n      remember me\n      {props.captchaUrl && (\n        <>\n          <img src={props.captchaUrl} alt=\"captcha\" />\n          <TextField\n            fullWidth\n            variant=\"outlined\"\n            size=\"small\"\n            name=\"captcha\"\n            label=\"captcha\"\n            value={formik.values.captcha || \"\"}\n            onChange={formik.handleChange}\n          />\n        </>\n      )}\n      <Button\n        type=\"submit\"\n        variant={\"contained\"}\n        color=\"primary\"\n        disabled={formik.isSubmitting}\n        fullWidth\n      >\n        log in\n      </Button>\n    </form>\n  );\n};\n","import { connect } from \"react-redux\";\nimport { login } from \"../../redux/auth-reduser\";\nimport { Login } from \"./Login\";\n\nlet mapStateToProps = (state) => ({\n  isAuth: state.auth.isAuth,\n  formError: state.auth.messages[0],\n  captchaUrl: state.auth.captchaUrl,\n});\n\nconst LoginContainer = connect(mapStateToProps, { login })(Login);\n\nexport default LoginContainer;\n"],"sourceRoot":""}